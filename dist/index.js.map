{"mappings":"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","sources":["<anon>","src/index.js","src/modules/slider.js","src/modules/slider-factory.js","src/modules/utils.js","src/modules/pager-factory.js"],"sourcesContent":["(() => {\n// This version is for use without es6 modules\n// Dependencies: slider-factory.js, pager-factory.js, utils.js\n/**\n * @file slider-factory.js is responsible for creating and rendering the slider.\n * @module sliderFactory\n */ /**\n * Factory function to create a slider object with methods to initialize, move\n * to previous/next slide, check button states, add listeners, show/hide\n * buttons, get gap and items to show, and check pager.\n * @namespace slider\n * @property {Object} responsive - Object containing responsive options for\n * the slider.\n * @property {HTMLElement} slider - The slider element.\n * @property {HTMLElement} sliderInner - The inner slider element containing\n * the slides.\n * @property {NodeList} elements - The list of slide elements.\n * @property {HTMLElement} buttons - The slider navigation buttons element.\n * @property {HTMLElement} prevButton - The previous slide button element.\n * @property {HTMLElement} nextButton - The next slide button element.\n * @property {HTMLElement} pagerEl - The pager element.\n * @property {string} hiddenClass - The class name to hide the navigation\n * buttons.\n * @property {Object} pager - The pager object with methods to render and set\n * active pager item.\n * @property {function} init - Method to initialize the slider with the given\n * slider element and responsive options.\n * @property {function} moveToPrevious - Method to move to the previous slide.\n * @property {function} moveToNext - Method to move to the next slide.\n * @property {function} checkButtons - Method to check the button states\n * (disabled or enabled).\n * @property {function} addListeners - Method to add event listeners for scroll,\n * keyboard navigation, load and resize.\n * @property {function} showHideButtons - Method to show or hide the navigation\n * buttons based on the container width and total width of the slides.\n * @property {function} getGap - Method to get the gap between the slides.\n * @property {function} getItemsToShow - Method to get the number of items to\n * show based on the responsive options.\n * @property {function} checkPager - Method to check the pager and set the\n * active pager item.\n */ /**\n * Returns the current responsive options based on the current viewport\n *\n * @param {Object} responsive - Object containing responsive options\n * @return {Object}\n */ const $97ae949e493c6975$export$9266a1443ac0612 = (responsive)=>{\n    const viewportWidth = window.visualViewport.width;\n    let responsiveItems = Object.keys(responsive).filter((key)=>key < viewportWidth);\n    responsiveItems = responsiveItems.map((i)=>Number(i));\n    const key = responsiveItems.length > 0 ? Math.max(...responsiveItems) : Math.min(...Object.keys(responsive).map(Number));\n    return responsive[key];\n};\n/**\n * Debounce function that returns a promise\n *\n * @param {Function} func\n * @param {Number} delay\n * @return {Function}\n */ function $97ae949e493c6975$export$45ee3b73b8783988(func, delay) {\n    let timeoutId;\n    return function(...args) {\n        const context = this;\n        clearTimeout(timeoutId);\n        return new Promise((resolve)=>{\n            timeoutId = setTimeout(()=>{\n                resolve(func.apply(context, args));\n            }, delay);\n        });\n    };\n}\n/**\n * Checks whether HTML element appears with the visible part of the\n * visible portion of the slider\n *\n * @param {HTMLElement} element\n * @param {HTMLElement} parent - The slider element\n * @return {Boolean}\n */ const $97ae949e493c6975$var$_withinViewport = (element, parent)=>{\n    const elementRect = element.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n    return elementRect.left >= parentRect.left && elementRect.left <= parentRect.right;\n};\n/**\n * Returns the slider item at the given index.\n * @param {string|number} index - The index of the slider item to retrieve.\n * @param {Array} elements - The array of slider items.\n * @return {HTMLElement} - The slider item at the given index.\n */ const $97ae949e493c6975$var$_getSliderItem = (index, elements)=>{\n    if (!elements || elements.length === 0) return null;\n    if (typeof index === 'string') index = parseInt(index, 10);\n    if (isNaN(index) || index < 0 || index >= elements.length) return null;\n    return elements[index];\n};\n/**\n   * Calculate the width of an item based on the available space and the number\n   * of items to show (excluding the css gap spacing)\n   *\n   * @param {Number} width - the visible width of the slider\n   * @param {Number} itemsToShow - the number of items that should be visible\n   * @param {Number} gap - this css gap property width\n   * @return {Number}\n   */ const $97ae949e493c6975$var$_getItemSize = function(width, itemsToShow, gap) {\n    const tempWidth = width - gap * (itemsToShow - 1);\n    return tempWidth / itemsToShow;\n};\n/**\n *\n * @param {NodeList} elements\n * @param {Number} itemWidth\n */ function $97ae949e493c6975$var$_setElementWidths(elements, itemWidth) {\n    elements.forEach((item)=>{\n        item.style.flexBasis = itemWidth + 'px';\n    });\n}\nconst $97ae949e493c6975$var$_makePositions = function(elements, elementWidth) {\n    const positions = [];\n    for(let index = 0; index < elements.length; index++)positions.push(elementWidth * index);\n    return positions;\n};\nconst $97ae949e493c6975$var$_scrollToNext = function(container, gutter, positions) {\n    let scrollPosition = container.scrollLeft;\n    scrollPosition = scrollPosition + container.clientWidth - gutter;\n    const filteredPositions = positions.filter((i)=>i >= scrollPosition);\n    if (filteredPositions.length == 0) return scrollPosition;\n    else return Math.min(...filteredPositions);\n};\nconst $97ae949e493c6975$var$_scrollToPrevious = function(container, gutter, positions) {\n    let scrollPosition = container.scrollLeft;\n    scrollPosition = scrollPosition - container.clientWidth + gutter;\n    const filteredPositions = positions.filter((i)=>i <= scrollPosition);\n    if (filteredPositions.length == 0) return 0;\n    else return Math.max(...filteredPositions);\n};\n/**\n   * Takes a container element and a set of slider elements (which should all be\n   * the same width). From this we can calculate the width of the container and\n   * we can then work out what the nearest next or previous item if we are to\n   * scroll the slider by the width of the container.\n   *\n   * @param {HTMLElement} container\n   * @param {NodeList} elements\n   * @param {String} direction\n   * @param {Number} gutter need the gutter width\n   * @return {Number}\n   */ function $97ae949e493c6975$var$_getScrollTo(container, elements, direction, gutter) {\n    // let scrollPosition = container.scrollLeft;\n    const elementWidth = elements[0].clientWidth + gutter;\n    const positions = $97ae949e493c6975$var$_makePositions(elements, elementWidth);\n    let scrollTo = 0;\n    switch(direction){\n        case 'next':\n            scrollTo = $97ae949e493c6975$var$_scrollToNext(container, gutter, positions);\n            break;\n        case 'previous':\n            scrollTo = $97ae949e493c6975$var$_scrollToPrevious(container, gutter, positions);\n            break;\n        default:\n            break;\n    }\n    return scrollTo;\n}\n/**\n * Generic function to drive the slide. Just needs a direction (previous or\n * next) and will do the rest of the heavy lifting.\n *\n * @param {String} direction\n * @param {HTMLElement} sliderInner\n * @param {Object} responsive\n */ const $97ae949e493c6975$export$c1742949d0193489 = function(direction, sliderInner, gap) {\n    if (!sliderInner) return;\n    const els = sliderInner.querySelectorAll('.slider-item');\n    if (!els || els.length === 0) return;\n    const scrollPosition = $97ae949e493c6975$var$_getScrollTo(sliderInner, els, direction, gap);\n    sliderInner.scrollTo({\n        left: scrollPosition,\n        behavior: 'smooth'\n    });\n};\n/**\n *\n * @param {*} start\n * @param {*} end\n * @param {*} els\n * @param {*} dataLeft\n * @param {*} i\n * @return {HTMLElement}\n */ function $97ae949e493c6975$export$dc35b5db7ba3f005(start, end, els, dataLeft, i) {\n    if (end > els.length) end = els.length;\n    end = end - 1;\n    const d = document.createElement('button');\n    d.classList.add('slider-pager-item');\n    d.setAttribute('data-page-start', start);\n    d.setAttribute('data-page-end', end);\n    d.setAttribute('data-scrollto', dataLeft);\n    d.type = 'button';\n    d.innerHTML = `<span>${i + 1}</span>`;\n    return d;\n}\n/**\n * Checks if the item is active\n *\n * @param {HTMLElement} item\n * @param {NodeList} elements\n * @param {Boolean} activeIsSet\n * @param {HTMLElement} slider\n * @return {Boolean}\n */ function $97ae949e493c6975$export$39e04e72f972b885(item, elements, activeIsSet, slider) {\n    const itemNo = item.getAttribute('data-page-end');\n    const innerItem = $97ae949e493c6975$var$_getSliderItem(itemNo, elements);\n    if (!activeIsSet && innerItem && $97ae949e493c6975$var$_withinViewport(innerItem, slider)) {\n        item.classList.add('active');\n        activeIsSet = true;\n    }\n    return activeIsSet;\n}\n/**\n * Gets the button element\n *\n * @param {HTMLElement} sliderInner\n * @param {HTMLElement} prevButton\n * @param {HTMLElement} nextButton\n */ function $97ae949e493c6975$export$fb18650d142de48d(sliderInner, prevButton, nextButton, btnClick = false) {\n    if (prevButton) {\n        if (sliderInner.scrollLeft < 50) {\n            prevButton.setAttribute('disabled', true);\n            // set focus to the next button\n            if (btnClick) nextButton.focus();\n        } else prevButton.removeAttribute('disabled');\n    }\n    const scrollMax = sliderInner.scrollWidth - sliderInner.clientWidth;\n    if (nextButton) {\n        if (sliderInner.scrollLeft >= scrollMax - 50) {\n            nextButton.setAttribute('disabled', true);\n            // set focus to the previous button\n            if (btnClick) prevButton.focus();\n        } else nextButton.removeAttribute('disabled');\n    }\n}\n/**\n * This function returns the slider object so that it can be used in a\n * promise chain.\n *\n * @param { Object } slider\n * @return { Object }\n */ const $97ae949e493c6975$export$8382a6a3b017d9e2 = function(slider) {\n    const containerWidth = slider.sliderInner.clientWidth;\n    const gap = slider.getGap();\n    const itemWidth = $97ae949e493c6975$var$_getItemSize(containerWidth - slider.getPreview(), slider.getItemsToShow(), gap);\n    slider.sliderInner.style.gap = '0 ' + gap + 'px';\n    $97ae949e493c6975$var$_setElementWidths(slider.elements, itemWidth);\n    slider.tempTotalWidth = itemWidth * slider.elements.length + gap * (slider.elements.length - 1);\n    return slider;\n};\n/**\n * Handle the pager click event\n *\n * @param {HTMLElement} element\n * @param {HTMLElement} slider\n * @param {HTMLElement} sliderInner\n */ function $97ae949e493c6975$export$43c35f60672766ee(element, slider, sliderInner) {\n    if (!element || !slider || !sliderInner) return;\n    // Defensive: ensure we have the correct element\n    const pagerItem = element.closest('.slider-pager-item');\n    if (!pagerItem) return;\n    const scrollTo = pagerItem.getAttribute('data-scrollto');\n    if (scrollTo) {\n        // remove active class from all pager items\n        slider.querySelectorAll('.slider-pager-item').forEach((item)=>{\n            item.classList.remove('active');\n        });\n        // add active class to the clicked pager item\n        pagerItem.classList.add('active');\n        // scroll the slider to the value of the pager item\n        sliderInner.scrollTo({\n            left: scrollTo,\n            behavior: 'smooth'\n        });\n    }\n}\nconst $97ae949e493c6975$export$de363e709c412c8a = function(func, limit) {\n    let inThrottle;\n    return function() {\n        const args = arguments;\n        const context = this;\n        if (!inThrottle) {\n            func.apply(context, args);\n            inThrottle = true;\n            setTimeout(()=>inThrottle = false, limit);\n        }\n    };\n};\n/**\n * Normalise the scroll event across browsers\n *\n * @param {HTMLElement} element\n * @param {Function} func\n * @param  {...any} args\n */ const $97ae949e493c6975$export$1db75a395cad5afe = function(element, func, ...args) {\n    const context = this;\n    if ('onscrollend' in window) element.addEventListener('scrollend', ()=>{\n        func.apply(context, args);\n    });\n    else // fall back to scroll listener with timeout for browsers\n    // that don't support scrollend\n    element.addEventListener('scroll', ()=>{\n        clearTimeout(window.scrollEndTimer);\n        window.scrollEndTimer = setTimeout(()=>{\n            func.apply(context, args);\n        }, 50);\n    });\n};\n\n\n/**\n * @file pager-factory.js is responsible for creating and rendering the pager\n * for the slider component.\n * @module pagerFactory\n */ /**\n * @typedef {Object} Pager\n * @property {function} init - Initializes the pager with the slider.\n * @property {function} getPageCount - Returns the total number of pages based\n * on the number of items to show.\n * @property {function} render - Renders the pager with the appropriate number\n * of pages.\n * @property {function} addEventListeners - Adds event listeners to the pager.\n * @property {function} setActivePagerItem - Sets the active pager item based\n * on the current slide.\n */ \nconst $bf38c4cdf06353f9$var$pager = {};\n$bf38c4cdf06353f9$var$pager.init = function(slider) {\n    this.slider = slider;\n    this.render();\n    this.addEventListeners();\n};\n$bf38c4cdf06353f9$var$pager.getPageCount = function() {\n    return Math.ceil(this.slider.elements.length / this.slider.getItemsToShow());\n};\n$bf38c4cdf06353f9$var$pager.render = function() {\n    this.slider.pagerEl.innerHTML = '';\n    const itemsToShow = this.slider.getItemsToShow();\n    if (itemsToShow === 1) return;\n    const elementArray = Array.from(this.slider.elements);\n    const pages = this.getPageCount();\n    for(let i = 0; i < pages; i++){\n        const start = i * itemsToShow;\n        const end = start + itemsToShow;\n        const sub = elementArray.slice(start, end);\n        const dataLeft = sub[0].offsetLeft;\n        const d = (0, $97ae949e493c6975$export$dc35b5db7ba3f005)(start, end, this.slider.elements, dataLeft, i);\n        this.slider.pagerEl.appendChild(d);\n    }\n};\n$bf38c4cdf06353f9$var$pager.addEventListeners = function() {\n    const slider = this.slider;\n    this.slider.pagerEl.addEventListener('click', (e)=>{\n        const el = e.target;\n        (0, $97ae949e493c6975$export$43c35f60672766ee)(el, slider.slider, slider.sliderInner);\n    });\n};\n$bf38c4cdf06353f9$var$pager.setActivePagerItem = function() {\n    const slider = this.slider;\n    let items = slider.slider.querySelectorAll('.slider-pager-item');\n    // convert to array and reverse so that we run backwards from the last\n    // page - easiest way to fix the last page bug\n    items = Array.from(items);\n    items.reverse();\n    let activeIsSet = false;\n    items.forEach((item)=>{\n        activeIsSet = (0, $97ae949e493c6975$export$39e04e72f972b885)(item, slider.elements, activeIsSet, slider.slider);\n    });\n};\n/**\n * Creates a pager object with the given slider.\n * @param {Object} slider - The slider object to create the pager for.\n * @return {Pager} - The pager object.\n */ const $bf38c4cdf06353f9$var$makePager = function(slider) {\n    const obj = Object.create($bf38c4cdf06353f9$var$pager);\n    obj.init(slider);\n    return obj;\n};\nvar $bf38c4cdf06353f9$export$2e2bcd8739ae039 = $bf38c4cdf06353f9$var$makePager;\n\n\nconst $ac7d93ccdc6a4856$var$slider = {};\n$ac7d93ccdc6a4856$var$slider.init = function(sliderEl, responsive, hiddenClass = 'hidden') {\n    // reference the responsive object\n    this.responsive = responsive;\n    this.slider = sliderEl;\n    this.sliderInner = this.slider.querySelector('.slider-inner');\n    this.isSliding = false;\n    this.isBtnClick = false;\n    // Defensive check for sliderInner\n    if (!this.sliderInner) {\n        console.warn('Slider inner element not found.');\n        return;\n    }\n    // Nodelist of slider items\n    this.elements = this.sliderInner.querySelectorAll('.slider-item');\n    // setup elements\n    this.buttons = this.slider.querySelector('.slider-nav');\n    this.prevButton = this.slider.querySelector('.slider-prev');\n    this.nextButton = this.slider.querySelector('.slider-next');\n    this.pagerEl = this.slider.querySelector('.slider-pager');\n    this.hiddenClass = hiddenClass;\n    if (this.pagerEl) this.pager = (0, $bf38c4cdf06353f9$export$2e2bcd8739ae039)(this);\n    this.addListeners();\n};\n$ac7d93ccdc6a4856$var$slider.moveToPrevious = function() {\n    if (this.isSliding) return;\n    this.isSliding = true;\n    (0, $97ae949e493c6975$export$c1742949d0193489)('previous', this.sliderInner, this.getGap());\n};\n$ac7d93ccdc6a4856$var$slider.moveToNext = function() {\n    if (this.isSliding) return;\n    this.isSliding = true;\n    (0, $97ae949e493c6975$export$c1742949d0193489)('next', this.sliderInner, this.getGap());\n};\n$ac7d93ccdc6a4856$var$slider.checkButtons = function() {\n    (0, $97ae949e493c6975$export$fb18650d142de48d)(this.sliderInner, this.prevButton, this.nextButton, this.isBtnClick);\n    this.isBtnClick = false;\n};\n$ac7d93ccdc6a4856$var$slider.addListeners = function() {\n    if (this.prevButton) this.prevButton.addEventListener('click', ()=>{\n        this.isBtnClick = true;\n        this.moveToPrevious();\n    });\n    if (this.nextButton) this.nextButton.addEventListener('click', ()=>{\n        this.isBtnClick = true;\n        this.moveToNext();\n    });\n    this._onScrollEnd();\n    this._keyboardNavigation();\n    this._loadAndResize();\n};\n$ac7d93ccdc6a4856$var$slider._loadAndResize = function() {\n    const setItemSizePromise = (0, $97ae949e493c6975$export$45ee3b73b8783988)((0, $97ae949e493c6975$export$8382a6a3b017d9e2), 50);\n    const handler = ()=>{\n        setItemSizePromise(this).then((slider)=>{\n            slider.showHideButtons();\n            slider.checkButtons();\n            if (slider.pager) {\n                slider.pager.render();\n                slider.checkPager();\n            }\n        }).catch((err)=>{\n            console.error(err);\n        });\n    };\n    window.addEventListener('DOMContentLoaded', handler);\n    window.addEventListener('resize', handler);\n};\n$ac7d93ccdc6a4856$var$slider._onScrollEnd = function() {\n    const that = this;\n    const handleScrollEnd = ()=>{\n        that.checkButtons();\n        that.isSliding = false;\n    };\n    const handlePagerOnScroll = ()=>{\n        that.checkPager();\n    };\n    // throttled scroll listener\n    const throttledScrollHandler = (0, $97ae949e493c6975$export$de363e709c412c8a)(handlePagerOnScroll, 50);\n    this.sliderInner.addEventListener('scroll', throttledScrollHandler);\n    (0, $97ae949e493c6975$export$1db75a395cad5afe)(this.sliderInner, handleScrollEnd);\n};\n$ac7d93ccdc6a4856$var$slider._keyboardNavigation = function() {\n    const that = this;\n    this.sliderInner.addEventListener('keydown', function(e) {\n        if (e.key === 'ArrowLeft') {\n            e.preventDefault();\n            that.moveToPrevious();\n        }\n        if (e.key === 'ArrowRight') {\n            e.preventDefault();\n            that.moveToNext();\n        }\n        if (e.key === 'Home') {\n            e.preventDefault();\n            that.sliderInner.scrollTo({\n                left: 0,\n                behavior: 'smooth'\n            });\n        }\n        if (e.key === 'End') {\n            e.preventDefault();\n            that.sliderInner.scrollTo({\n                left: that.sliderInner.scrollWidth,\n                behavior: 'smooth'\n            });\n        }\n    });\n};\n$ac7d93ccdc6a4856$var$slider.showHideButtons = function() {\n    if (this.buttons != undefined) {\n        const containerWidth = this.sliderInner.clientWidth;\n        if (containerWidth >= this.tempTotalWidth) this.buttons.classList.add(this.hiddenClass);\n        else this.buttons.classList.remove(this.hiddenClass);\n    }\n};\n$ac7d93ccdc6a4856$var$slider.getGap = function() {\n    const opts = (0, $97ae949e493c6975$export$9266a1443ac0612)(this.responsive);\n    return opts['gutter'];\n};\n$ac7d93ccdc6a4856$var$slider.getItemsToShow = function() {\n    const opts = (0, $97ae949e493c6975$export$9266a1443ac0612)(this.responsive);\n    return opts['items'];\n};\n$ac7d93ccdc6a4856$var$slider.getPreview = function() {\n    const opts = (0, $97ae949e493c6975$export$9266a1443ac0612)(this.responsive);\n    if (opts['preview']) return parseInt(opts['preview'], 10);\n    return 0;\n};\n$ac7d93ccdc6a4856$var$slider.checkPager = function() {\n    if (this.pager) {\n        if (this.pager.getPageCount() === 1) this.pagerEl.classList.add(this.hiddenClass);\n        else this.pagerEl.classList.remove(this.hiddenClass);\n        this.slider.querySelectorAll('.slider-pager-item').forEach((sliderItem)=>{\n            sliderItem.classList.remove('active');\n        });\n        this.pager.setActivePagerItem();\n    }\n};\nconst $ac7d93ccdc6a4856$var$makeSlider = function(sliderElement, responsive, hiddenClass) {\n    const obj = Object.create($ac7d93ccdc6a4856$var$slider);\n    obj.init(sliderElement, responsive, hiddenClass);\n    return obj;\n};\nvar $ac7d93ccdc6a4856$export$2e2bcd8739ae039 = $ac7d93ccdc6a4856$var$makeSlider;\n\n\n/**\n * slider is just a wrapper function that initialises the slider\n * based on the options passed to it.\n * It also sets the default options for the slider.\n *\n * Users can pass their own options to the slider function and override\n * the default options to customise the slider as required.\n *\n * @param {Object} Options object\n * @returns {void}\n */ const $9d58f3e588a50717$var$slider = function({ container: container = '.slider', responsive: responsive = {\n    0: {\n        items: 2,\n        gutter: 16\n    },\n    576: {\n        items: 3,\n        gutter: 16\n    },\n    768: {\n        items: 4,\n        gutter: 16\n    },\n    992: {\n        items: 5,\n        gutter: 16\n    },\n    1200: {\n        items: 6,\n        gutter: 16\n    }\n}, hiddenClass: hiddenClass = 'hidden' } = {}) {\n    /**\n   * Get a list of all the slider items on the page\n   */ const sliders = document.querySelectorAll(container);\n    /**\n   * Initialise sliders from a NodeList based on the current selector\n   */ sliders.forEach((slider)=>{\n        (0, $ac7d93ccdc6a4856$export$2e2bcd8739ae039)(slider, responsive, hiddenClass);\n    });\n};\nvar $9d58f3e588a50717$export$2e2bcd8739ae039 = $9d58f3e588a50717$var$slider;\n\n\nwindow.slider = (0, $9d58f3e588a50717$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=index.js.map\n","// This version is for use without es6 modules\n\nimport slider from './modules/slider';\nwindow.slider = slider;\n","// Dependencies: slider-factory.js, pager-factory.js, utils.js\nimport makeSlider from './slider-factory.js';\n\n/**\n * slider is just a wrapper function that initialises the slider\n * based on the options passed to it.\n * It also sets the default options for the slider.\n *\n * Users can pass their own options to the slider function and override\n * the default options to customise the slider as required.\n *\n * @param {Object} Options object\n * @returns {void}\n */\nconst slider = function ({\n  container = '.slider',\n  responsive = {\n    0: {\n      items: 2,\n      gutter: 16,\n    },\n    576: {\n      items: 3,\n      gutter: 16,\n    },\n    768: {\n      items: 4,\n      gutter: 16,\n    },\n    992: {\n      items: 5,\n      gutter: 16,\n    },\n    1200: {\n      items: 6,\n      gutter: 16,\n    },\n  },\n  hiddenClass = 'hidden',\n} = {}) {\n  /**\n   * Get a list of all the slider items on the page\n   */\n  const sliders = document.querySelectorAll(container);\n\n  /**\n   * Initialise sliders from a NodeList based on the current selector\n   */\n  sliders.forEach((slider) => {\n    makeSlider(slider, responsive, hiddenClass);\n  });\n};\n\nexport default slider;\n","/**\n * @file slider-factory.js is responsible for creating and rendering the slider.\n * @module sliderFactory\n */\n\n/**\n * Factory function to create a slider object with methods to initialize, move\n * to previous/next slide, check button states, add listeners, show/hide\n * buttons, get gap and items to show, and check pager.\n * @namespace slider\n * @property {Object} responsive - Object containing responsive options for\n * the slider.\n * @property {HTMLElement} slider - The slider element.\n * @property {HTMLElement} sliderInner - The inner slider element containing\n * the slides.\n * @property {NodeList} elements - The list of slide elements.\n * @property {HTMLElement} buttons - The slider navigation buttons element.\n * @property {HTMLElement} prevButton - The previous slide button element.\n * @property {HTMLElement} nextButton - The next slide button element.\n * @property {HTMLElement} pagerEl - The pager element.\n * @property {string} hiddenClass - The class name to hide the navigation\n * buttons.\n * @property {Object} pager - The pager object with methods to render and set\n * active pager item.\n * @property {function} init - Method to initialize the slider with the given\n * slider element and responsive options.\n * @property {function} moveToPrevious - Method to move to the previous slide.\n * @property {function} moveToNext - Method to move to the next slide.\n * @property {function} checkButtons - Method to check the button states\n * (disabled or enabled).\n * @property {function} addListeners - Method to add event listeners for scroll,\n * keyboard navigation, load and resize.\n * @property {function} showHideButtons - Method to show or hide the navigation\n * buttons based on the container width and total width of the slides.\n * @property {function} getGap - Method to get the gap between the slides.\n * @property {function} getItemsToShow - Method to get the number of items to\n * show based on the responsive options.\n * @property {function} checkPager - Method to check the pager and set the\n * active pager item.\n */\nimport {\n  checkButtonState,\n  debouncePromise,\n  getResponsiveOptions,\n  setItemSize,\n  slide,\n  throttle,\n  onScrollEnd,\n} from './utils.js';\n\nimport makePager from './pager-factory.js';\n\nconst slider = {};\n\nslider.init = function (\n  sliderEl,\n  responsive,\n  hiddenClass = 'hidden') {\n  // reference the responsive object\n  this.responsive = responsive;\n  this.slider = sliderEl;\n  this.sliderInner = this.slider.querySelector('.slider-inner');\n  this.isSliding = false;\n  this.isBtnClick = false;\n\n  // Defensive check for sliderInner\n  if (!this.sliderInner) {\n    console.warn('Slider inner element not found.');\n    return;\n  }\n\n  // Nodelist of slider items\n  this.elements = this.sliderInner.querySelectorAll('.slider-item');\n\n  // setup elements\n  this.buttons = this.slider.querySelector('.slider-nav');\n  this.prevButton = this.slider.querySelector('.slider-prev');\n  this.nextButton = this.slider.querySelector('.slider-next');\n  this.pagerEl = this.slider.querySelector('.slider-pager');\n  this.hiddenClass = hiddenClass;\n\n  if (this.pagerEl) {\n    this.pager = makePager(this);\n  }\n\n  this.addListeners();\n};\n\nslider.moveToPrevious = function () {\n  if (this.isSliding) return;\n  this.isSliding = true;\n  slide('previous',\n    this.sliderInner,\n    this.getGap());\n};\n\nslider.moveToNext = function () {\n  if (this.isSliding) return;\n  this.isSliding = true;\n  slide('next',\n    this.sliderInner,\n    this.getGap());\n};\n\nslider.checkButtons = function () {\n  checkButtonState(\n    this.sliderInner,\n    this.prevButton,\n    this.nextButton,\n    this.isBtnClick);\n  this.isBtnClick = false;\n};\n\nslider.addListeners = function () {\n  if (this.prevButton) {\n    this.prevButton.addEventListener(\n      'click', () => {\n        this.isBtnClick = true;\n        this.moveToPrevious();\n      });\n  }\n\n  if (this.nextButton) {\n    this.nextButton.addEventListener(\n      'click', () => {\n        this.isBtnClick = true;\n        this.moveToNext();\n      });\n  }\n\n  this._onScrollEnd();\n  this._keyboardNavigation();\n  this._loadAndResize();\n};\n\nslider._loadAndResize = function () {\n  const setItemSizePromise = debouncePromise(setItemSize, 50);\n\n  const handler = () => {\n    setItemSizePromise(this).then((slider) => {\n      slider.showHideButtons();\n      slider.checkButtons();\n\n      if (slider.pager) {\n        slider.pager.render();\n        slider.checkPager();\n      }\n    }).catch((err) => {\n      console.error(err);\n    });\n  };\n\n  window.addEventListener('DOMContentLoaded', handler);\n  window.addEventListener('resize', handler);\n};\n\nslider._onScrollEnd = function () {\n  const that = this;\n\n  const handleScrollEnd = () => {\n    that.checkButtons();\n    that.isSliding = false;\n  };\n\n  const handlePagerOnScroll = () => {\n    that.checkPager();\n  };\n\n  // throttled scroll listener\n  const throttledScrollHandler = throttle(handlePagerOnScroll, 50);\n  this.sliderInner.addEventListener('scroll', throttledScrollHandler);\n\n  onScrollEnd(this.sliderInner, handleScrollEnd);\n};\n\nslider._keyboardNavigation = function () {\n  const that = this;\n  this.sliderInner.addEventListener('keydown', function (e) {\n    if (e.key === 'ArrowLeft') {\n      e.preventDefault();\n      that.moveToPrevious();\n    }\n\n    if (e.key === 'ArrowRight') {\n      e.preventDefault();\n      that.moveToNext();\n    }\n\n    if (e.key === 'Home') {\n      e.preventDefault();\n      that.sliderInner.scrollTo({ left: 0, behavior: 'smooth' });\n    }\n\n    if (e.key === 'End') {\n      e.preventDefault();\n      that.sliderInner.scrollTo({ left: that.sliderInner.scrollWidth, behavior: 'smooth' });\n    }\n  });\n};\n\nslider.showHideButtons = function () {\n  if (this.buttons != undefined) {\n    const containerWidth = this.sliderInner.clientWidth;\n    if (containerWidth >= this.tempTotalWidth) {\n      this.buttons.classList.add(this.hiddenClass);\n    }\n    else {\n      this.buttons.classList.remove(this.hiddenClass);\n    }\n  }\n};\n\nslider.getGap = function () {\n  const opts = getResponsiveOptions(this.responsive);\n  return opts['gutter'];\n};\n\nslider.getItemsToShow = function () {\n  const opts = getResponsiveOptions(this.responsive);\n  return opts['items'];\n};\n\nslider.getPreview = function () {\n  const opts = getResponsiveOptions(this.responsive);\n  if (opts['preview']) {\n    return parseInt(opts['preview'], 10);\n  }\n\n  return 0;\n};\n\nslider.checkPager = function () {\n  if (this.pager) {\n    if (this.pager.getPageCount() === 1) {\n      this.pagerEl.classList.add(this.hiddenClass);\n    }\n    else {\n      this.pagerEl.classList.remove(this.hiddenClass);\n    }\n\n    this.slider.querySelectorAll(\n      '.slider-pager-item').forEach((sliderItem) => {\n      sliderItem.classList.remove('active');\n    });\n\n    this.pager.setActivePagerItem();\n  }\n};\n\nconst makeSlider = function (sliderElement, responsive, hiddenClass) {\n  const obj = Object.create(slider);\n  obj.init(sliderElement, responsive, hiddenClass);\n  return obj;\n};\n\nexport default makeSlider;\n","/**\n * Returns the current responsive options based on the current viewport\n *\n * @param {Object} responsive - Object containing responsive options\n * @return {Object}\n */\nconst getResponsiveOptions = (responsive) => {\n  const viewportWidth = window.visualViewport.width;\n  let responsiveItems = Object.keys(responsive).filter(\n    key => key < viewportWidth);\n  responsiveItems = responsiveItems.map(i => Number(i));\n  const key = responsiveItems.length > 0 ? Math.max(...responsiveItems) : Math.min(...Object.keys(responsive).map(Number));\n  return responsive[key];\n};\n\n/**\n * Debounce function that returns a promise\n *\n * @param {Function} func\n * @param {Number} delay\n * @return {Function}\n */\nfunction debouncePromise(func, delay) {\n  let timeoutId;\n\n  return function (...args) {\n    const context = this;\n\n    clearTimeout(timeoutId);\n    return new Promise((resolve) => {\n      timeoutId = setTimeout(() => {\n        resolve(func.apply(context, args));\n      }, delay);\n    });\n  };\n}\n\n/**\n * Checks whether HTML element appears with the visible part of the\n * visible portion of the slider\n *\n * @param {HTMLElement} element\n * @param {HTMLElement} parent - The slider element\n * @return {Boolean}\n */\nconst _withinViewport = (element, parent) => {\n  const elementRect = element.getBoundingClientRect();\n  const parentRect = parent.getBoundingClientRect();\n\n  return (\n    elementRect.left >= parentRect.left\n    && elementRect.left <= parentRect.right\n  );\n};\n\n/**\n * Returns the slider item at the given index.\n * @param {string|number} index - The index of the slider item to retrieve.\n * @param {Array} elements - The array of slider items.\n * @return {HTMLElement} - The slider item at the given index.\n */\nconst _getSliderItem = (index, elements) => {\n  if (!elements || elements.length === 0) return null;\n  if (typeof (index) === 'string') {\n    index = parseInt(index, 10);\n  }\n  if (isNaN(index) || index < 0 || index >= elements.length) return null;\n  return elements[index];\n};\n\n/**\n   * Calculate the width of an item based on the available space and the number\n   * of items to show (excluding the css gap spacing)\n   *\n   * @param {Number} width - the visible width of the slider\n   * @param {Number} itemsToShow - the number of items that should be visible\n   * @param {Number} gap - this css gap property width\n   * @return {Number}\n   */\nconst _getItemSize = function (width, itemsToShow, gap) {\n  const tempWidth = width - (gap * (itemsToShow - 1));\n  return tempWidth / itemsToShow;\n};\n\n/**\n *\n * @param {NodeList} elements\n * @param {Number} itemWidth\n */\nfunction _setElementWidths(elements, itemWidth) {\n  elements.forEach((item) => {\n    item.style.flexBasis = itemWidth + 'px';\n  });\n}\n\nconst _makePositions = function (elements, elementWidth) {\n  const positions = [];\n  for (let index = 0; index < elements.length; index++) {\n    positions.push(elementWidth * index);\n  }\n  return positions;\n};\n\nconst _scrollToNext = function (container, gutter, positions) {\n  let scrollPosition = container.scrollLeft;\n  scrollPosition = scrollPosition + container.clientWidth - gutter;\n\n  const filteredPositions = positions.filter(i => i >= scrollPosition);\n  if (filteredPositions.length == 0) {\n    return scrollPosition;\n  }\n  else {\n    return Math.min(...filteredPositions);\n  }\n};\n\nconst _scrollToPrevious = function (container, gutter, positions) {\n  let scrollPosition = container.scrollLeft;\n  scrollPosition = scrollPosition - container.clientWidth + gutter;\n\n  const filteredPositions = positions.filter(i => i <= scrollPosition);\n  if (filteredPositions.length == 0) {\n    return 0;\n  }\n  else {\n    return Math.max(...filteredPositions);\n  }\n};\n\n/**\n   * Takes a container element and a set of slider elements (which should all be\n   * the same width). From this we can calculate the width of the container and\n   * we can then work out what the nearest next or previous item if we are to\n   * scroll the slider by the width of the container.\n   *\n   * @param {HTMLElement} container\n   * @param {NodeList} elements\n   * @param {String} direction\n   * @param {Number} gutter need the gutter width\n   * @return {Number}\n   */\nfunction _getScrollTo(container, elements, direction, gutter) {\n  // let scrollPosition = container.scrollLeft;\n  const elementWidth = elements[0].clientWidth + gutter;\n\n  const positions = _makePositions(elements, elementWidth);\n\n  let scrollTo = 0;\n\n  switch (direction) {\n    case 'next':\n      scrollTo = _scrollToNext(container, gutter, positions);\n      break;\n\n    case 'previous':\n      scrollTo = _scrollToPrevious(container, gutter, positions);\n      break;\n\n    default:\n      break;\n  }\n\n  return scrollTo;\n}\n\n/**\n * Generic function to drive the slide. Just needs a direction (previous or\n * next) and will do the rest of the heavy lifting.\n *\n * @param {String} direction\n * @param {HTMLElement} sliderInner\n * @param {Object} responsive\n */\nconst slide = function (direction, sliderInner, gap) {\n  if (!sliderInner) return;\n  const els = sliderInner.querySelectorAll('.slider-item');\n  if (!els || els.length === 0) return;\n  const scrollPosition = _getScrollTo(\n    sliderInner, els, direction, gap);\n  sliderInner.scrollTo({\n    left: scrollPosition,\n    behavior: 'smooth',\n  });\n};\n\n/**\n *\n * @param {*} start\n * @param {*} end\n * @param {*} els\n * @param {*} dataLeft\n * @param {*} i\n * @return {HTMLElement}\n */\nfunction getButtonElement(start, end, els, dataLeft, i) {\n  if (end > els.length) {\n    end = els.length;\n  }\n  end = end - 1;\n\n  const d = document.createElement('button');\n  d.classList.add('slider-pager-item');\n  d.setAttribute('data-page-start', start);\n  d.setAttribute('data-page-end', end);\n  d.setAttribute('data-scrollto', dataLeft);\n  d.type = 'button';\n  d.innerHTML = `<span>${i + 1}</span>`;\n  return d;\n}\n\n/**\n * Checks if the item is active\n *\n * @param {HTMLElement} item\n * @param {NodeList} elements\n * @param {Boolean} activeIsSet\n * @param {HTMLElement} slider\n * @return {Boolean}\n */\nfunction isActive(item, elements, activeIsSet, slider) {\n  const itemNo = item.getAttribute('data-page-end');\n  const innerItem = _getSliderItem(itemNo, elements);\n\n  if (!activeIsSet\n    && innerItem\n    && _withinViewport(innerItem, slider)) {\n    item.classList.add('active');\n    activeIsSet = true;\n  }\n  return activeIsSet;\n}\n\n/**\n * Gets the button element\n *\n * @param {HTMLElement} sliderInner\n * @param {HTMLElement} prevButton\n * @param {HTMLElement} nextButton\n */\nfunction checkButtonState(\n  sliderInner,\n  prevButton,\n  nextButton,\n  btnClick = false) {\n  if (prevButton) {\n    if (sliderInner.scrollLeft < 50) {\n      prevButton.setAttribute('disabled', true);\n      // set focus to the next button\n      if (btnClick) {\n        nextButton.focus();\n      }\n    }\n    else {\n      prevButton.removeAttribute('disabled');\n    }\n  }\n\n  const scrollMax = sliderInner.scrollWidth - sliderInner.clientWidth;\n\n  if (nextButton) {\n    if (sliderInner.scrollLeft >= scrollMax - 50) {\n      nextButton.setAttribute('disabled', true);\n      // set focus to the previous button\n      if (btnClick) {\n        prevButton.focus();\n      }\n    }\n    else {\n      nextButton.removeAttribute('disabled');\n    }\n  }\n}\n\n/**\n * This function returns the slider object so that it can be used in a\n * promise chain.\n *\n * @param { Object } slider\n * @return { Object }\n */\nconst setItemSize = function (slider) {\n  const containerWidth = slider.sliderInner.clientWidth;\n  const gap = slider.getGap();\n\n  const itemWidth = _getItemSize(\n    containerWidth - slider.getPreview(),\n    slider.getItemsToShow(),\n    gap);\n\n  slider.sliderInner.style.gap = '0 ' + gap + 'px';\n  _setElementWidths(slider.elements, itemWidth);\n\n  slider.tempTotalWidth = itemWidth * slider.elements.length + gap * (slider.elements.length - 1);\n  return slider;\n};\n\n/**\n * Handle the pager click event\n *\n * @param {HTMLElement} element\n * @param {HTMLElement} slider\n * @param {HTMLElement} sliderInner\n */\nfunction handlePagerClick(element, slider, sliderInner) {\n  if (!element || !slider || !sliderInner) return;\n  // Defensive: ensure we have the correct element\n  const pagerItem = element.closest('.slider-pager-item');\n  if (!pagerItem) return;\n  const scrollTo = pagerItem.getAttribute('data-scrollto');\n\n  if (scrollTo) {\n    // remove active class from all pager items\n    slider.querySelectorAll('.slider-pager-item')\n      .forEach((item) => {\n        item.classList.remove('active');\n      });\n\n    // add active class to the clicked pager item\n    pagerItem.classList.add('active');\n\n    // scroll the slider to the value of the pager item\n    sliderInner.scrollTo({\n      left: scrollTo,\n      behavior: 'smooth',\n    });\n  }\n}\n\nconst throttle = function (func, limit) {\n  let inThrottle;\n  return function () {\n    const args = arguments;\n    const context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\n/**\n * Normalise the scroll event across browsers\n *\n * @param {HTMLElement} element\n * @param {Function} func\n * @param  {...any} args\n */\nconst onScrollEnd = function (element, func, ...args) {\n  const context = this;\n  if ('onscrollend' in window) {\n    element.addEventListener(\n      'scrollend', () => {\n        func.apply(context, args);\n      });\n  }\n  else {\n    // fall back to scroll listener with timeout for browsers\n    // that don't support scrollend\n    element.addEventListener('scroll', () => {\n      clearTimeout(window.scrollEndTimer);\n      window.scrollEndTimer = setTimeout(() => {\n        func.apply(context, args);\n      }, 50);\n    });\n  };\n};\n\nexport {\n  checkButtonState,\n  debouncePromise,\n  getButtonElement,\n  getResponsiveOptions,\n  handlePagerClick,\n  isActive,\n  setItemSize,\n  slide,\n  throttle,\n  onScrollEnd,\n};\n","/**\n * @file pager-factory.js is responsible for creating and rendering the pager\n * for the slider component.\n * @module pagerFactory\n */\n\n/**\n * @typedef {Object} Pager\n * @property {function} init - Initializes the pager with the slider.\n * @property {function} getPageCount - Returns the total number of pages based\n * on the number of items to show.\n * @property {function} render - Renders the pager with the appropriate number\n * of pages.\n * @property {function} addEventListeners - Adds event listeners to the pager.\n * @property {function} setActivePagerItem - Sets the active pager item based\n * on the current slide.\n */\n\nimport {\n  getButtonElement,\n  handlePagerClick,\n  isActive,\n} from './utils.js';\n\nconst pager = {};\n\npager.init = function (slider) {\n  this.slider = slider;\n  this.render();\n  this.addEventListeners();\n};\n\npager.getPageCount = function () {\n  return Math.ceil(\n    this.slider.elements.length / this.slider.getItemsToShow());\n};\n\npager.render = function () {\n  this.slider.pagerEl.innerHTML = '';\n  const itemsToShow = this.slider.getItemsToShow();\n\n  if (itemsToShow === 1) return;\n\n  const elementArray = Array.from(this.slider.elements);\n  const pages = this.getPageCount();\n\n  for (let i = 0; i < pages; i++) {\n    const start = i * itemsToShow;\n    const end = start + itemsToShow;\n    const sub = elementArray.slice(start, end);\n\n    const dataLeft = sub[0].offsetLeft;\n\n    const d = getButtonElement(\n      start, end,\n      this.slider.elements,\n      dataLeft, i);\n    this.slider.pagerEl.appendChild(d);\n  }\n};\n\npager.addEventListeners = function () {\n  const slider = this.slider;\n\n  this.slider.pagerEl.addEventListener('click', (e) => {\n    const el = e.target;\n\n    handlePagerClick(\n      el, slider.slider, slider.sliderInner);\n  });\n};\n\npager.setActivePagerItem = function () {\n  const slider = this.slider;\n  let items = slider.slider.querySelectorAll('.slider-pager-item');\n\n  // convert to array and reverse so that we run backwards from the last\n  // page - easiest way to fix the last page bug\n  items = Array.from(items);\n  items.reverse();\n  let activeIsSet = false;\n  items.forEach((item) => {\n    activeIsSet = isActive(\n      item,\n      slider.elements,\n      activeIsSet,\n      slider.slider);\n  });\n};\n\n/**\n * Creates a pager object with the given slider.\n * @param {Object} slider - The slider object to create the pager for.\n * @return {Pager} - The pager object.\n */\nconst makePager = function (slider) {\n  const obj = Object.create(pager);\n  obj.init(slider);\n  return obj;\n};\n\nexport default makePager;\n"],"names":["$97ae949e493c6975$export$9266a1443ac0612","responsive","viewportWidth","window","visualViewport","width","responsiveItems","Object","keys","filter","key","map","i","Number","length","Math","max","min","$97ae949e493c6975$var$_withinViewport","element","parent","elementRect","getBoundingClientRect","parentRect","left","right","$97ae949e493c6975$var$_getSliderItem","index","elements","parseInt","isNaN","$97ae949e493c6975$var$_makePositions","elementWidth","positions","push","$97ae949e493c6975$var$_scrollToNext","container","gutter","scrollPosition","scrollLeft","clientWidth","filteredPositions","$97ae949e493c6975$var$_scrollToPrevious","$97ae949e493c6975$export$c1742949d0193489","direction","sliderInner","gap","els","querySelectorAll","$97ae949e493c6975$var$_getScrollTo","scrollTo","behavior","$97ae949e493c6975$export$8382a6a3b017d9e2","slider","itemsToShow","containerWidth","getGap","itemWidth","getPreview","tempWidth","getItemsToShow","style","$97ae949e493c6975$var$_setElementWidths","forEach","item","flexBasis","tempTotalWidth","$97ae949e493c6975$export$de363e709c412c8a","func","limit","inThrottle","args","arguments","apply","setTimeout","$97ae949e493c6975$export$1db75a395cad5afe","context","addEventListener","clearTimeout","scrollEndTimer","$bf38c4cdf06353f9$var$pager","init","render","addEventListeners","getPageCount","ceil","pagerEl","innerHTML","elementArray","Array","from","pages","start","end","dataLeft","sub","slice","offsetLeft","d","document","createElement","classList","add","setAttribute","type","appendChild","e","pagerItem","closest","getAttribute","remove","target","setActivePagerItem","items","reverse","activeIsSet","innerItem","$bf38c4cdf06353f9$export$2e2bcd8739ae039","obj","create","$ac7d93ccdc6a4856$var$slider","sliderEl","hiddenClass","querySelector","isSliding","isBtnClick","console","warn","buttons","prevButton","nextButton","pager","addListeners","moveToPrevious","moveToNext","checkButtons","btnClick","focus","removeAttribute","scrollMax","scrollWidth","_onScrollEnd","_keyboardNavigation","_loadAndResize","timeoutId","setItemSizePromise","Promise","resolve","handler","then","showHideButtons","checkPager","catch","err","error","that","throttledScrollHandler","preventDefault","undefined","opts","sliderItem","$ac7d93ccdc6a4856$export$2e2bcd8739ae039","sliderElement","sliders"],"version":3,"file":"index.js.map"}